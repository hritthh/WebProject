@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <EditForm Model="project" OnSubmit="AddProject" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Project Name</label>
                            <InputText @bind-Value="project.ProjectName" class="form-control"></InputText>
                            <label class="label-control">Due Date</label>
                            <InputDate @bind-Value="SelectedDueDate" class="form-control"></InputDate>
                            <label class="label-control">Progress</label>
                            <InputSelect @bind-Value="project.Progress" class="form-control">
                                <option value="To Do">To Do</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Complete">Complete</option>
                            </InputSelect>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-body">
                    <QuickGrid Items="@ProjectsQueryable" Pagination="pagination">
                        <PropertyColumn Property="@(p => p.ProjectId)" Sortable="true" Align="Align.Center" Title="ID" />
                        <TemplateColumn Title="Project Name">
                            <button class="btn btn-link" @onclick="(() => RedirectToTaskDetails(context.ProjectId))">
                                @context.ProjectName
                            </button>
                        </TemplateColumn>
                        <PropertyColumn Property="@(p => p.DueDate)" Format="yyyy-MM-dd" Sortable="true" Title="Due Date" />
                        <PropertyColumn Title="Days Left" Property="@(p => ComputeDaysLeft(p.DueDate))" Sortable="true" Align="Align.Right" />
                        <PropertyColumn Property="@(p => p.Progress)" Sortable="true" Title="Progress" />
                        <TemplateColumn Title="Action">
                            <button @onclick="@(() => Edit(context))" class="btn btn-info">Edit</button>
                            <button @onclick="@(() => Delete(context))" class="btn btn-danger">Delete</button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
                <div class="card-footer"><Paginator State="@pagination" /></div>
            </div>
        </div>
    </div>
</div>
<h1>Hello, welcome!</h1>

Make handling task way more fun and efficient.

@code {
    // Pagination
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    IQueryable<Project> ProjectsQueryable = Enumerable.Empty<Project>().AsQueryable();

    [SupplyParameterFromForm]
    Project project { get; set; } = new();
    DateOnly SelectedDueDate;
    static List<Project> ProjectsList = new();

    protected override void OnInitialized()
    {
        ConvertListToQueryable();
    }

    async Task AddProject()
    {
        project.DueDate = SelectedDueDate;

        // Update existing project
        if (project.ProjectId > 0)
        {
            var p = ProjectsList.FirstOrDefault(_ => _.ProjectId == project.ProjectId);
            if (p is null) return;
            ProjectsList.Remove(p);
            ProjectsList.Add(project);
            project = new();
            GetDataAgain();
            return;
        }

        // Add new project
        if (string.IsNullOrWhiteSpace(project.ProjectName)) return;
        project.ProjectId = ProjectsList.Count + 1;
        ProjectsList.Add(project);
        project = new();
        GetDataAgain();
        return;
    }

    // Load data from List to Queryable container
    private void ConvertListToQueryable()
    {
        if (ProjectsList is null) return;
        foreach (var proj in ProjectsList.OrderBy(_ => _.ProjectId))
        {
            ProjectsQueryable = ProjectsQueryable.Concat(new[] { proj }.AsQueryable());
        }
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    // Clear container and reload
    void GetDataAgain()
    {
        ProjectsQueryable = Enumerable.Empty<Project>().AsQueryable();
        ConvertListToQueryable();
    }

    void Edit(Project incomingModel)
    {
        SelectedDueDate = incomingModel.DueDate;
        project = incomingModel;
    }

    void Delete(Project incomingModel)
    {
        ProjectsList.Remove(ProjectsList.FirstOrDefault(_ => _.ProjectId == incomingModel.ProjectId));
        GetDataAgain();
    }

    // Compute Days Left
    int ComputeDaysLeft(DateOnly dueDate)
    {
        return (dueDate.ToDateTime(TimeOnly.MinValue) - DateTime.Now).Days;
    }

    // Redirect to task details page
    void RedirectToTaskDetails(int projectId)
    {
        NavigationManager.NavigateTo($"/taskdetails/{projectId}");
    }

    public class Project
    {
        public int ProjectId { get; set; }
        public string? ProjectName { get; set; }
        public DateOnly DueDate { get; set; }
        public string Progress { get; set; } = "To Do";
    }
}
